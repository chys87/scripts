#!/bin/bash

export LC_ALL=C.UTF-8

# Some packages (such as xmlto) use $BASH
# We explicitly set this so that they use "/bin/bash" instead of "/bin/sh"
# even if /bin/sh is also bash
export BASH=/bin/bash

# Add override-bin
add-override-bin() {
	local target="$ROOT/etc/portage/override-bin"
	local IFS=:
	local p
	for p in $PATH; do
		if [[ "$p" = "$target" ]]; then
			return
		fi
	done
	export PATH="$target:$PATH"
}
add-override-bin
unset -f add-override-bin

# Known to fail
# Some packages fail if FFLAGS is set. So set it only if really needed
case "$CATEGORY/$PN" in
	sci-libs/*-reference|sci-libs/lapack) # Reference blas/lapack can definitely compile at O3
		export CFLAGS="${CFLAGS/-O2/-O3}"
		export FFLAGS="${CFLAGS}"
		export FCFLAGS="${CFLAGS}"
		;;
	sci-mathematics/scilab|sci-libs/*-atlas|sci-libs/fftw|dev-python/numpy)
		export FFLAGS="${CFLAGS}"
		export FCFLAGS="${CFLAGS}"
		;;
esac

# Disable some patches
case "$CATEGORY/$PN" in
	sys-devel/gcc|cross-*/gcc)
		export EPATCH_USER_EXCLUDE+=" *-fortify-source.patch"
		einfo "Disabling *-fortify-source.patch"
		# Remove CET (endbr64 instruction generation)
		if [[ -d "$S" && "$EBUILD_PHASE" == prepare ]]; then
			find "$S" -name configure -exec sed -i -e 's/CET_FLAGS="-fcf-protection -mshstk"/CET_FLAGS=""/' {} \+
		fi
		;;
	sys-devel/clang-common)
		if [[ -d "$ED" && -f "$ED/etc/clang/gentoo-common.cfg" ]]; then
			einfo "Undo gentoo-hardened.cfg"
			sed -i -e 's/^@gentoo-hardened.cfg/# &/g' "$ED/etc/clang/gentoo-common.cfg"
		fi
		;;
esac

# MIN_KERN_VER in make.conf no longer works.  We set it via EXTRA_ECONF
case "$CATEGORY/$PN" in
	sys-libs/glibc)
		export EXTRA_ECONF="--enable-kernel=5.10.0"
		;;
esac

autopatch() {
	local patcher="${ROOT%/}/etc/portage/portage-autopatch.py"
	local category="${CATEGORY}"
	case "$CATEGORY/$PN" in
		cross-*/gcc)
			category=sys-devel
			;;
		cross-*/glibc)
			category=sys-libs
			;;
	esac
	"$patcher" --patch-overlay="${ROOT%/}/etc/portage/autopatch" \
		--category="$category" --pn="$PN" --pv="$PV" --slot="$SLOT" --s="$S" || die
}

autopatch_preinst() {
	local f
	case "$CATEGORY/$PN" in
		www-client/microsoft-edge*|www-client/google-chrome*)
			for f in "$ED/opt/google/chrome${PN#google-chrome}/${PN}" "$ED/opt/microsoft/msedge${PN#microsoft-edge}/${PN}"; do
				if [[ -f "$f" ]]; then
					einfo "Patching $f"
					sed -i -e 's!^\(exec 2\?> >(exec cat\)!# \1!' "$f" || die
					if ! grep -Fq wayland-ime "$f"; then
						sed -i -e 's!\(exec.*\)"\$@"!\1 --enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime "$@"!' "$f" || die
					fi
				fi
			done
			;;
	esac
}

# Outputing depends often disrupts normal portage output
if [ "$EBUILD_PHASE" != 'depend' ]; then
	einfo "Ebuild phase: $EBUILD_PHASE"
fi

# It's best to apply in it "prepare", however, we also need to try it again in configure and compile
# a) EAPI<2 has no prepare or configure phase;
# b) For some packages, it may be better to wait until all ebuild patches have been applied
# (TODO - support configuring this behavior in inclusions.pyon)
# We used to simply skip "prepare", but that doesn't work if we modified configure.ac
case "$EBUILD_PHASE" in
	prepare|configure|compile)
		autopatch;;
	preinst)
		autopatch_preinst;;
esac

:
