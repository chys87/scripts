#!/bin/bash

# We no longer set LC_ALL=C. Normally portage handles this.
# Some packages actually want UTF-8 and fail strangely if we force C locale.
#export LC_ALL=C

# Some packages (such as xmlto) use $BASH
# We explicitly set this so that they use "/bin/bash" instead of "/bin/sh"
# even if /bin/sh is also bash
export BASH=/bin/bash

# Add override-bin
add-override-bin() {
	local target="$ROOT/etc/portage/override-bin"
	local IFS=:
	local p
	for p in $PATH; do
		if [[ "$p" = "$target" ]]; then
			return
		fi
	done
	export PATH="$target:$PATH"
}
add-override-bin
unset -f add-override-bin

# Known to fail
# Some packages fail if FFLAGS is set. So set it only if really needed
case "$CATEGORY/$PN" in
	sci-libs/*-reference) # Reference blas/lapack can definitely compile at O3
		export CFLAGS="${CFLAGS/-O2/-O3}"
		export FFLAGS="${CFLAGS}"
		;;
	sci-mathematics/scilab|sci-libs/*-atlas|sci-libs/fftw|dev-python/numpy)
		export FFLAGS="${CFLAGS}"
		;;
esac

# Some packages refuse to build if CFLAGS/CXXFLAGS contains macro arguments
if [[ "$CFLAGS" == *-U_FORTIFY_SOURCE* ]]; then
	case "$CATEGORY/$PN" in
		net-dns/c-ares|net-misc/curl)
			export CPPFLAGS="$CPPFLAGS -U_FORTIFY_SOURCE"
			export CFLAGS="${CFLAGS/-U_FORTIFY_SOURCE/}"
			export CXXFLAGS="${CXXFLAGS/-U_FORTIFY_SOURCE/}"
			;;
	esac
fi

# Disable some patches
case "$CATEGORY/$PN" in
	sys-devel/gcc)
		export EPATCH_EXCLUDE+=" 10_all_default-fortify-source.patch"
		einfo "Disabling 10_all_default-fortify-source.patch"
		;;
esac

if [[ -f ${ROOT}/etc/portage/x32list ]]; then
	# Don't use fgrep. Portage warns about it.
	while read -r x32package; do
		case "$x32package" in
			"$CATEGORY/$PN")
				export CC="${CHOST}-gcc -mx32"
				export CXX="${CHOST}-g++ -mx32"
				export DEFAULT_ABI="x32"
				export ABI="x32"
				break
				;;
		esac
	done < ${ROOT}/etc/portage/x32list
	unset -v x32package
fi

autopatch() {
	local patcher="${ROOT%/}/etc/portage/portage-autopatch.py"
	"$patcher" --patch-overlay="${ROOT%/}/etc/portage/autopatch" \
		--category="$CATEGORY" --pn="$PN" --pv="$PV" --slot="$SLOT" --s="$S" || die
}

# Outputing depends often disrupts normal portage output
if [ "$EBUILD_PHASE" != 'depend' ]; then
	einfo "Ebuild phase: $EBUILD_PHASE"
fi

# It's best to apply in it "prepare", however, we also need to try it again in configure and compile
# a) EAPI<2 has no prepare or configure phase;
# b) For some packages, it may be better to wait until all ebuild patches have been applied
# (TODO - support configuring this behavior in inclusions.pyon)
# We used to simply skip "prepare", but that doesn't work if we modified configure.ac
case "$EBUILD_PHASE" in
	prepare|configure|compile)
		autopatch;;
esac

:
